# This is a baseling. Can be run as is, but it's expected you will set some parameters
# according to your host (like CPU's, memory and disk size), as well as customize
# the command-line parameters.
#
# The most common configuration options are documented and commented below.
# For a complete reference, please see the online documentation at
# https://docs.vagrantup.com.
# Every Vagrant development environment requires a box. You can search for
# boxes at https://vagrantcloud.com/search.

#
# BOX VARIABLES
#

# These are some (but not all) of the parameters you can change.
# They are grouped here for convinience.
VM_NAME = "backup-box"

# Alternatively you can use "hashicorp/bionic64" instead as a base box.
# Hashicorp only recommends hashicorp and bento boxes.
VM_BOX = "bento/ubuntu-24.04"

# CPU, ram and disk size can be changed now or later.
# Disk size can't be reduced afterwards.
# Min disk size with bento/hashicorp boxes is 64gb,
# unless you really want to dig in the configurations.
CPU_COUNT = 2
RAM_MB = 8196
DISK_SIZE = "80GB"

PRIVATE_NET_IP = "192.168.56.101"

# Check for necessary plugins
unless Vagrant.has_plugin?("vagrant-disksize")
  raise 'missing plugin: vagrant plugin install vagrant-disksize'
end
unless Vagrant.has_plugin?("vagrant-vbguest")
  raise 'missing plugin: vagrant plugin install vagrant-vbguest'
end

#
# VAGRANT CONFIGURATION
#
Vagrant.configure("2") do |config|
  config.vm.box = VM_BOX
  config.vm.define VM_NAME
  config.vm.hostname = VM_NAME
  config.disksize.size = DISK_SIZE
  #
  # Network and port configuration
  #
  # Set ports as needed
  #config.vm.network :forwarded_port, guest: 8080, host: 8080

  # Private network
  # Configure host-only adapter in Host Network manager, VirtualBox before
  # You can specify an IP or remove it and let DCHP handle it
  config.vm.network "private_network", ip: PRIVATE_NET_IP

  # Bridged network
  # You can specify an IP or let DHCP handle it
  #config.vm.network "public_network"

  # Share a folder between host and VM.
  # Can also be done later throught the GUI
  #config.vm.synced_folder "C:/projects"

  #
  # VIRTUALBOX CONFIGURATION
  #
  # For more options: https://www.virtualbox.org/manual/ch08.html#vboxmanage-cmd-overview
  config.vm.provider "virtualbox" do |vb|
    vb.name = VM_NAME
    vb.cpus = CPU_COUNT
    vb.memory = RAM_MB
    vb.check_guest_additions = true
	  vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga" ]
    vb.customize ["modifyvm", :id, "--vram", "128"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]
    vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
    vb.customize ["modifyvm", :id, "--uartmode1", "disconnected" ]
	  vb.customize ["modifyvm", :id, "--vrde", "off" ]
  end

  #
  # COMMAND LINE INSTRUCTIONS
  #
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    sudo apt-get update
    sudo apt-get upgrade -y
    sudo apt-get install -y vim git curl tree python3-pip build-essential
    sudo apt-get install -y python3 \
    python3-pip \
    idle3 \
    virtualenv \
    python3-venv \
    libpq-dev

    echo 'Installing pipx'
    virtualenv $HOME/.venv
    source $HOME/.venv/bin/activate
    pip3 install pipx
    pipx ensurepath

    echo 'Installing poetry'
    pipx install poetry

    echo 'Installing astral.sh/uv'
    pipx install uv

    echo 'Appending to bashrc file...'

    # install docker
    sudo apt-get install -y \
          ca-certificates \
          curl \
          gnupg \
          lsb-release
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    sudo groupadd docker
    sudo usermod -aG docker $USER
    
  
    echo 'Fetching and installing miniconda'
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
    bash ~/miniconda.sh -b -p $HOME/.conda
    export PATH=$HOME/.conda/bin:$PATH
    conda init
    rm ~/miniconda.sh

    echo 'Installing Micromamba'
    wget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
    mv bin/micromamba ~/.local/bin/micromamba
    rm -rf bin/
    ~/.local/bin/micromamba shell init -s bash ~/.micromamba

    echo "" >> ~/.bashrc
    echo "# Conda aliases" >> ~/.bashrc
    echo "alias mamba='micromamba'" >> ~/.bashrc
    echo "alias createEnv='conda create python=3.13 -n'" >> ~/.bashrc
    echo "alias createMambaEnv='mamba create python=3.13 -n'" >> ~/.bashrc
    echo "" >> ~/.bashrc

    echo "Creating .condarc using cat with a here document..."

    cat << EOF > ~/.condarc
channels:
  - conda-forge
  - defaults
channel_priority: strict
EOF

    echo "Your .condarc file has been created/overwritten."
    echo "Content of ~/.condarc:"
    cat ~/.condarc

    # Install nvm
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash

    # install java/maven
    sudo apt-get install -y default-jdk maven
    sudo snap install intellij-idea-community --classic
  
    # install Vscode
    sudo snap install code --classic
  
    # install ubuntu gui
    sudo apt-get install -y ubuntu-desktop
    echo ""
    echo "*************************"
    echo "* Please reboot your VM *"
    echo "*************************"
    echo ""
  SHELL
  config.vm.provision :shell, :inline => "sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/America/Montreal /etc/localtime", run: "always"
end